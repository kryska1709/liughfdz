import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.util.*; import java.util.f.Matcher; import java.util.f.Pattern; public class shifvgsf { public static void main(String[] args){ Scanner scanner = new Scanner(System.in); System.out.print("Введите путь к файлу: "); String k = scanner.nextLine(); System.out.print("Введите новое имя для класса: "); String z = scanner.nextLine(); try { String p = Files.readString(Path.of(k)); String a = Path.of(k).getFileName().toString().replace(".java", ""); p = r(p); p = p.replaceAll("\\b" + a + "\\b", z); Map<String, String> identifierMap = generateUniqueIdentifiers(p, z); for (Map.Entry<String, String> entry : identifierMap.entrySet()) { p = p.replaceAll("\\b" + entry.getKey() + "\\b", entry.getValue()); } Files.writeString(Path.of(z + ".java"), p); } catch (IOException e) { e.printStackTrace(); } } private static String r(String c) { return c.replaceAll("(/\\*.*?\\*/)|( .replaceAll("\\s+", " ") .trim(); } private static Map<String, String> generateUniqueIdentifiers(String m, String z) { Set<String> identifiers = new HashSet<>(); String f = "\\b(?:int|double|String|boolean|float|char|long|byte|short|void|class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"; Matcher matcher = Pattern.compile(f).matcher(m); while (matcher.find()) { String t = matcher.group(1); if (!t.equals(z) && !t.equals("main")) { identifiers.add(t); } } return generateUniqueNames(identifiers); } private static Map<String, String> generateUniqueNames(Set<String> identifiers) { Map<String, String> map = new HashMap<>(); Set<String> usedNames = new HashSet<>(); Random random = new Random(); for (String t : identifiers) { String v; do { v = d(identifiers.size(), random); } while (usedNames.contains(v)); usedNames.add(v); map.put(t, v); } return map; } private static String d(int g, Random random) { if (g <= 26){ return String.valueOf((char) ('a' + random.nextInt(26))); } else { return "" + (char) ('a' + random.nextInt(26)) + (char) ('a' + random.nextInt(26)); } } }